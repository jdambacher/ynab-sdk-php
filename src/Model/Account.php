<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ynab
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ynab\Model;

use \ArrayAccess;
use \Ynab\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  Ynab
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Account implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'type' => 'string',
        'onBudget' => 'bool',
        'closed' => 'bool',
        'note' => 'string',
        'balance' => 'int',
        'clearedBalance' => 'int',
        'unclearedBalance' => 'int',
        'transferPayeeId' => 'string',
        'directImportLinked' => 'bool',
        'directImportInError' => 'bool',
        'deleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'name' => null,
        'type' => null,
        'onBudget' => null,
        'closed' => null,
        'note' => null,
        'balance' => 'int64',
        'clearedBalance' => 'int64',
        'unclearedBalance' => 'int64',
        'transferPayeeId' => 'uuid',
        'directImportLinked' => null,
        'directImportInError' => null,
        'deleted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'onBudget' => 'on_budget',
        'closed' => 'closed',
        'note' => 'note',
        'balance' => 'balance',
        'clearedBalance' => 'cleared_balance',
        'unclearedBalance' => 'uncleared_balance',
        'transferPayeeId' => 'transfer_payee_id',
        'directImportLinked' => 'direct_import_linked',
        'directImportInError' => 'direct_import_in_error',
        'deleted' => 'deleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'onBudget' => 'setOnBudget',
        'closed' => 'setClosed',
        'note' => 'setNote',
        'balance' => 'setBalance',
        'clearedBalance' => 'setClearedBalance',
        'unclearedBalance' => 'setUnclearedBalance',
        'transferPayeeId' => 'setTransferPayeeId',
        'directImportLinked' => 'setDirectImportLinked',
        'directImportInError' => 'setDirectImportInError',
        'deleted' => 'setDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'onBudget' => 'getOnBudget',
        'closed' => 'getClosed',
        'note' => 'getNote',
        'balance' => 'getBalance',
        'clearedBalance' => 'getClearedBalance',
        'unclearedBalance' => 'getUnclearedBalance',
        'transferPayeeId' => 'getTransferPayeeId',
        'directImportLinked' => 'getDirectImportLinked',
        'directImportInError' => 'getDirectImportInError',
        'deleted' => 'getDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_CHECKING = 'checking';
    const TYPE_SAVINGS = 'savings';
    const TYPE_CASH = 'cash';
    const TYPE_CREDIT_CARD = 'creditCard';
    const TYPE_LINE_OF_CREDIT = 'lineOfCredit';
    const TYPE_OTHER_ASSET = 'otherAsset';
    const TYPE_OTHER_LIABILITY = 'otherLiability';
    const TYPE_PAY_PAL = 'payPal';
    const TYPE_MERCHANT_ACCOUNT = 'merchantAccount';
    const TYPE_INVESTMENT_ACCOUNT = 'investmentAccount';
    const TYPE_MORTGAGE = 'mortgage';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CHECKING,
            self::TYPE_SAVINGS,
            self::TYPE_CASH,
            self::TYPE_CREDIT_CARD,
            self::TYPE_LINE_OF_CREDIT,
            self::TYPE_OTHER_ASSET,
            self::TYPE_OTHER_LIABILITY,
            self::TYPE_PAY_PAL,
            self::TYPE_MERCHANT_ACCOUNT,
            self::TYPE_INVESTMENT_ACCOUNT,
            self::TYPE_MORTGAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['onBudget'] = isset($data['onBudget']) ? $data['onBudget'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['clearedBalance'] = isset($data['clearedBalance']) ? $data['clearedBalance'] : null;
        $this->container['unclearedBalance'] = isset($data['unclearedBalance']) ? $data['unclearedBalance'] : null;
        $this->container['transferPayeeId'] = isset($data['transferPayeeId']) ? $data['transferPayeeId'] : null;
        $this->container['directImportLinked'] = isset($data['directImportLinked']) ? $data['directImportLinked'] : null;
        $this->container['directImportInError'] = isset($data['directImportInError']) ? $data['directImportInError'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['onBudget'] === null) {
            $invalidProperties[] = "'onBudget' can't be null";
        }
        if ($this->container['closed'] === null) {
            $invalidProperties[] = "'closed' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        if ($this->container['clearedBalance'] === null) {
            $invalidProperties[] = "'clearedBalance' can't be null";
        }
        if ($this->container['unclearedBalance'] === null) {
            $invalidProperties[] = "'unclearedBalance' can't be null";
        }
        if ($this->container['transferPayeeId'] === null) {
            $invalidProperties[] = "'transferPayeeId' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets onBudget
     *
     * @return bool
     */
    public function getOnBudget()
    {
        return $this->container['onBudget'];
    }

    /**
     * Sets onBudget
     *
     * @param bool $onBudget Whether this account is on budget or not
     *
     * @return $this
     */
    public function setOnBudget($onBudget)
    {
        $this->container['onBudget'] = $onBudget;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed Whether this account is closed or not
     *
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int $balance The current balance of the account in milliunits format
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets clearedBalance
     *
     * @return int
     */
    public function getClearedBalance()
    {
        return $this->container['clearedBalance'];
    }

    /**
     * Sets clearedBalance
     *
     * @param int $clearedBalance The current cleared balance of the account in milliunits format
     *
     * @return $this
     */
    public function setClearedBalance($clearedBalance)
    {
        $this->container['clearedBalance'] = $clearedBalance;

        return $this;
    }

    /**
     * Gets unclearedBalance
     *
     * @return int
     */
    public function getUnclearedBalance()
    {
        return $this->container['unclearedBalance'];
    }

    /**
     * Sets unclearedBalance
     *
     * @param int $unclearedBalance The current uncleared balance of the account in milliunits format
     *
     * @return $this
     */
    public function setUnclearedBalance($unclearedBalance)
    {
        $this->container['unclearedBalance'] = $unclearedBalance;

        return $this;
    }

    /**
     * Gets transferPayeeId
     *
     * @return string
     */
    public function getTransferPayeeId()
    {
        return $this->container['transferPayeeId'];
    }

    /**
     * Sets transferPayeeId
     *
     * @param string $transferPayeeId The payee id which should be used when transferring to this account
     *
     * @return $this
     */
    public function setTransferPayeeId($transferPayeeId)
    {
        $this->container['transferPayeeId'] = $transferPayeeId;

        return $this;
    }

    /**
     * Gets directImportLinked
     *
     * @return bool
     */
    public function getDirectImportLinked()
    {
        return $this->container['directImportLinked'];
    }

    /**
     * Sets directImportLinked
     *
     * @param bool $directImportLinked Whether or not the account is linked to a financial institution for automatic transaction import.
     *
     * @return $this
     */
    public function setDirectImportLinked($directImportLinked)
    {
        $this->container['directImportLinked'] = $directImportLinked;

        return $this;
    }

    /**
     * Gets directImportInError
     *
     * @return bool
     */
    public function getDirectImportInError()
    {
        return $this->container['directImportInError'];
    }

    /**
     * Sets directImportInError
     *
     * @param bool $directImportInError If an account linked to a financial institution (direct_import_linked=true) and the linked connection is not in a healthy state, this will be true.
     *
     * @return $this
     */
    public function setDirectImportInError($directImportInError)
    {
        $this->container['directImportInError'] = $directImportInError;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


