<?php
/**
 * BudgetDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ynab
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ynab\Model;
use \Ynab\ObjectSerializer;

/**
 * BudgetDetail Class Doc Comment
 *
 * @category Class
 * @package  Ynab
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BudgetDetail extends BudgetSummary 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BudgetDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accounts' => '\Ynab\Model\Account[]',
        'payees' => '\Ynab\Model\Payee[]',
        'payee_locations' => '\Ynab\Model\PayeeLocation[]',
        'category_groups' => '\Ynab\Model\CategoryGroup[]',
        'categories' => '\Ynab\Model\Category[]',
        'months' => '\Ynab\Model\MonthDetail[]',
        'transactions' => '\Ynab\Model\TransactionSummary[]',
        'subtransactions' => '\Ynab\Model\SubTransaction[]',
        'scheduled_transactions' => '\Ynab\Model\ScheduledTransactionSummary[]',
        'scheduled_subtransactions' => '\Ynab\Model\ScheduledSubTransaction[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accounts' => null,
        'payees' => null,
        'payee_locations' => null,
        'category_groups' => null,
        'categories' => null,
        'months' => null,
        'transactions' => null,
        'subtransactions' => null,
        'scheduled_transactions' => null,
        'scheduled_subtransactions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts' => 'accounts',
        'payees' => 'payees',
        'payee_locations' => 'payee_locations',
        'category_groups' => 'category_groups',
        'categories' => 'categories',
        'months' => 'months',
        'transactions' => 'transactions',
        'subtransactions' => 'subtransactions',
        'scheduled_transactions' => 'scheduled_transactions',
        'scheduled_subtransactions' => 'scheduled_subtransactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts' => 'setAccounts',
        'payees' => 'setPayees',
        'payee_locations' => 'setPayeeLocations',
        'category_groups' => 'setCategoryGroups',
        'categories' => 'setCategories',
        'months' => 'setMonths',
        'transactions' => 'setTransactions',
        'subtransactions' => 'setSubtransactions',
        'scheduled_transactions' => 'setScheduledTransactions',
        'scheduled_subtransactions' => 'setScheduledSubtransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts' => 'getAccounts',
        'payees' => 'getPayees',
        'payee_locations' => 'getPayeeLocations',
        'category_groups' => 'getCategoryGroups',
        'categories' => 'getCategories',
        'months' => 'getMonths',
        'transactions' => 'getTransactions',
        'subtransactions' => 'getSubtransactions',
        'scheduled_transactions' => 'getScheduledTransactions',
        'scheduled_subtransactions' => 'getScheduledSubtransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['payees'] = isset($data['payees']) ? $data['payees'] : null;
        $this->container['payee_locations'] = isset($data['payee_locations']) ? $data['payee_locations'] : null;
        $this->container['category_groups'] = isset($data['category_groups']) ? $data['category_groups'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['months'] = isset($data['months']) ? $data['months'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['subtransactions'] = isset($data['subtransactions']) ? $data['subtransactions'] : null;
        $this->container['scheduled_transactions'] = isset($data['scheduled_transactions']) ? $data['scheduled_transactions'] : null;
        $this->container['scheduled_subtransactions'] = isset($data['scheduled_subtransactions']) ? $data['scheduled_subtransactions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts
     *
     * @return \Ynab\Model\Account[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \Ynab\Model\Account[] $accounts accounts
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets payees
     *
     * @return \Ynab\Model\Payee[]
     */
    public function getPayees()
    {
        return $this->container['payees'];
    }

    /**
     * Sets payees
     *
     * @param \Ynab\Model\Payee[] $payees payees
     *
     * @return $this
     */
    public function setPayees($payees)
    {
        $this->container['payees'] = $payees;

        return $this;
    }

    /**
     * Gets payee_locations
     *
     * @return \Ynab\Model\PayeeLocation[]
     */
    public function getPayeeLocations()
    {
        return $this->container['payee_locations'];
    }

    /**
     * Sets payee_locations
     *
     * @param \Ynab\Model\PayeeLocation[] $payee_locations payee_locations
     *
     * @return $this
     */
    public function setPayeeLocations($payee_locations)
    {
        $this->container['payee_locations'] = $payee_locations;

        return $this;
    }

    /**
     * Gets category_groups
     *
     * @return \Ynab\Model\CategoryGroup[]
     */
    public function getCategoryGroups()
    {
        return $this->container['category_groups'];
    }

    /**
     * Sets category_groups
     *
     * @param \Ynab\Model\CategoryGroup[] $category_groups category_groups
     *
     * @return $this
     */
    public function setCategoryGroups($category_groups)
    {
        $this->container['category_groups'] = $category_groups;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Ynab\Model\Category[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Ynab\Model\Category[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets months
     *
     * @return \Ynab\Model\MonthDetail[]
     */
    public function getMonths()
    {
        return $this->container['months'];
    }

    /**
     * Sets months
     *
     * @param \Ynab\Model\MonthDetail[] $months months
     *
     * @return $this
     */
    public function setMonths($months)
    {
        $this->container['months'] = $months;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Ynab\Model\TransactionSummary[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Ynab\Model\TransactionSummary[] $transactions transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets subtransactions
     *
     * @return \Ynab\Model\SubTransaction[]
     */
    public function getSubtransactions()
    {
        return $this->container['subtransactions'];
    }

    /**
     * Sets subtransactions
     *
     * @param \Ynab\Model\SubTransaction[] $subtransactions subtransactions
     *
     * @return $this
     */
    public function setSubtransactions($subtransactions)
    {
        $this->container['subtransactions'] = $subtransactions;

        return $this;
    }

    /**
     * Gets scheduled_transactions
     *
     * @return \Ynab\Model\ScheduledTransactionSummary[]
     */
    public function getScheduledTransactions()
    {
        return $this->container['scheduled_transactions'];
    }

    /**
     * Sets scheduled_transactions
     *
     * @param \Ynab\Model\ScheduledTransactionSummary[] $scheduled_transactions scheduled_transactions
     *
     * @return $this
     */
    public function setScheduledTransactions($scheduled_transactions)
    {
        $this->container['scheduled_transactions'] = $scheduled_transactions;

        return $this;
    }

    /**
     * Gets scheduled_subtransactions
     *
     * @return \Ynab\Model\ScheduledSubTransaction[]
     */
    public function getScheduledSubtransactions()
    {
        return $this->container['scheduled_subtransactions'];
    }

    /**
     * Sets scheduled_subtransactions
     *
     * @param \Ynab\Model\ScheduledSubTransaction[] $scheduled_subtransactions scheduled_subtransactions
     *
     * @return $this
     */
    public function setScheduledSubtransactions($scheduled_subtransactions)
    {
        $this->container['scheduled_subtransactions'] = $scheduled_subtransactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


